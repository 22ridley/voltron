<html>
<head>

<style>
  .all { padding: 10px; } h1 { font-size: 50; display: inline; text-align:
  center; padding: 10px; } .header_background { background-color: #7688a6; }
  .failure { color: maroon } a {color: inherit; text-decoration: none;}
</style>

</head>

<body>
<div class="header_background">
  <a href="/">
    <h1>Voltron</h1>
  </a>
</div>
<div class="all">
  <h2>Login</h2>
  <form action="/view" method="get" accept-charset="utf-8">
    <label>User name:
      <p>
        <input name="name" />
      </p>
    </label>
    <input type="submit" value="Submit" />
  </form>
  {{#if failed}}
    <div class="failure">
      <h3>
        Login attempted failed. Please check your user name and try again.
      </h3>
    </div>
  {{/if}}
</div>

<script type="module">
  // Import the functions you need from the SDKs you need
  import { initializeApp } from "https://www.gstatic.com/firebasejs/10.9.0/firebase-app.js";
  // TODO: Add SDKs for Firebase products that you want to use
  // https://firebase.google.com/docs/web/setup#available-libraries
  import { getAuth, GoogleAuthProvider, signInWithRedirect, onAuthStateChanged } from "https://www.gstatic.com/firebasejs/10.9.0/firebase-auth.js";

  // Your web app's Firebase configuration
  const firebaseConfig = {
    apiKey: "AIzaSyBhZq1cflqUOXts2-1dtCDl7j-NBhpE7tw",
    authDomain: "voltron-1ea5c.firebaseapp.com",
    projectId: "voltron-1ea5c",
    storageBucket: "voltron-1ea5c.appspot.com",
    messagingSenderId: "1074514211093",
    appId: "1:1074514211093:web:ce0aa886c2224ccbb9b91c"
  };

  // Initialize Firebase
  const app = initializeApp(firebaseConfig);

  var provider = new GoogleAuthProvider();
  const auth = getAuth();

  onAuthStateChanged(auth, (user) => {
    if (user) {
      // User is signed in, see docs for a list of available properties
      // https://firebase.google.com/docs/reference/js/auth.user
      const uid = user.uid;
      console.log(user.displayName);
    } else {
      // User is signed out
      signInWithRedirect(auth, provider)
        .then((result) => {
          // This gives you a Google Access Token. You can use it to access the Google API.
          const credential = GoogleAuthProvider.credentialFromResult(result);
          const token = credential.accessToken;
          // The signed-in user info.
          const user = result.user;
          // IdP data available using getAdditionalUserInfo(result)
          // ...
        }).catch((error) => {
          // Handle Errors here.
          const errorCode = error.code;
          const errorMessage = error.message;
          // The email of the user's account used.
          const email = error.customData.email;
          // The AuthCredential type that was used.
          const credential = GoogleAuthProvider.credentialFromError(error);
          // ...
          console.log("error!");
        });
    }
  });
</script>


</body>
</html>
